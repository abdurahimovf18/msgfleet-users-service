from typing import Callable, ParamSpec, TypeVar, Any
from functools import wraps
import inspect

from xxhash import xxh64_hexdigest


P = ParamSpec("P")
R = TypeVar("R")


def generate_string_hash(s: str | bytes) -> str:
    return xxh64_hexdigest(s)


def memorize(fn: Callable[P, R]) -> Callable[P, R]:
    """
    This decorator caches the function response with key
    generated by arguments to a dict to improve the performance
    in certain functions and methods
    """
    storage = {}

    @wraps(fn)
    def wrapper(*ar: P.args, **kw: P.kwargs) -> R:
        attr_hash: str = generate_string_hash(f"{ar}{kw}")
        key: str = f"{fn.__module__}.{fn.__qualname__}[{attr_hash}]"
        
        if key not in storage:
            storage[key] = fn(*ar, **kw)
        return storage[key]
    
    return wrapper


@memorize
def signature(fn: Callable[[Any], Any]) -> inspect.Signature:
    return inspect.signature(fn)
